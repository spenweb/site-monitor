generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Contact {
  contactId                        Int            @default(autoincrement()) @id
  createdTime                      DateTime       @default(now())
  creatorUserId                    Int
  email                            String?
  familyName                       String?
  givenName                        String
  phone                            Int?
  updatedTime                      DateTime?
  creator                          User                     @relation("Contact_creatorUserIdToUser", fields: [creatorUserId], references: [userId])
  listeners                        Listener[]
  notifications                    Notification[]
  user                             User?          @relation("ContactToUser_contactId")
  webproperties                    WebProperty[]

  @@index([creatorUserId], name: "creatorUserId")
}

model Event {
  eventId         Int              @default(autoincrement()) @id
  monitorId       Int
  notificationId  Int?
  monitor         Monitor          @relation(fields: [monitorId], references: [monitorId])
  notification    Notification?    @relation(fields: [notificationId], references: [notificationId])
  heartBeatEvents HeartBeatEvent[]

  @@index([monitorId], name: "monitorTypeId")
  @@index([notificationId], name: "notificationId")
}

model HeartBeat {
  frequency   Int     @default(0)
  heartBeatId Int     @default(autoincrement()) @id
  monitorId   Int
  monitor     Monitor @relation(fields: [monitorId], references: [monitorId])

  @@index([monitorId], name: "monitorId")
}

model HeartBeatEvent {
  eventId          Int
  heartBeatEventId Int      @default(autoincrement()) @id
  httpResponseCode Int?
  requestTime      DateTime @default(now())
  responseTime     Float?
  event            Event    @relation(fields: [eventId], references: [eventId])

  @@index([eventId], name: "eventId")
}

model Listener {
  contactId            Int
  listenerId           Int                @default(autoincrement()) @id
  monitorId            Int
  notificationMethodId Int
  contact              Contact            @relation(fields: [contactId], references: [contactId])
  monitor              Monitor            @relation(fields: [monitorId], references: [monitorId])
  notificationMethod   NotificationMethod @relation(fields: [notificationMethodId], references: [notificationMethodId])

  @@index([contactId], name: "contactId")
  @@index([monitorId], name: "monitorId")
  @@index([notificationMethodId], name: "notificationMethodId")
}

model Monitor {
  monitorId     Int         @default(autoincrement()) @id
  monitorTypeId Int
  webPropertyId Int
  monitorType   MonitorType @relation(fields: [monitorTypeId], references: [monitorTypeId])
  webProperty   WebProperty @relation(fields: [webPropertyId], references: [webPropertyId])
  events        Event[]
  heartBeats    HeartBeat[]
  listeners     Listener[]

  @@index([monitorTypeId], name: "monitorTypeId")
  @@index([webPropertyId], name: "webPropertyId")
}

model MonitorType {
  defaultNotificationMethodId Int
  monitorTypeId               Int                @id
  typeName                    String
  defaultNotificationMethod   NotificationMethod @relation(fields: [defaultNotificationMethodId], references: [notificationMethodId])
  monitors                    Monitor[]

  @@index([defaultNotificationMethodId], name: "defaultNotificationMethod")
}

model Notification {
  contactId           Int
  contentId           Int
  methodId            Int
  notificationId      Int                 @default(autoincrement()) @id
  readTime            DateTime?
  sentTime            DateTime            @default(now())
  contact             Contact             @relation(fields: [contactId], references: [contactId])
  notificationContent NotificationContent @relation(fields: [contentId], references: [notificationContentId])
  notificationMethod  NotificationMethod  @relation(fields: [methodId], references: [notificationMethodId])
  events              Event[]

  @@index([contactId], name: "contactId")
  @@index([contentId], name: "contentId")
  @@index([methodId], name: "methodId")
}

model NotificationContent {
  notificationContentId Int            @default(autoincrement()) @id
  reason                String
  notifications         Notification[]
}

model NotificationMethod {
  methodName           String
  notificationMethodId Int            @id
  sisteners            Listener[]
  monitorTypes         MonitorType[]
  notifications        Notification[]
}

model User {
  contactId                           Int?          @unique
  createdTime                         DateTime      @default(now())
  password                            String?
  updatedTime                         DateTime?
  userId                              Int           @default(autoincrement()) @id
  username                            String        @unique
  contact                             Contact?      @relation("ContactToUser_contactId", fields: [contactId], references: [contactId])
  createdContacts                     Contact[]     @relation("Contact_creatorUserIdToUser")
  webProperties                       WebProperty[]

  @@index([contactId], name: "contact_index")
}

model WebProperty {
  createdTime     DateTime  @default(now())
  homeUrl         String
  managerUserId   Int
  ownerContactId  Int
  updatedTime     DateTime?
  webPropertyId   Int       @default(autoincrement()) @id
  manager         User      @relation(fields: [managerUserId], references: [userId])
  owner           Contact   @relation(fields: [ownerContactId], references: [contactId])
  monitors        Monitor[]

  @@index([managerUserId], name: "managedBy")
  @@index([ownerContactId], name: "ownerContactId")
}