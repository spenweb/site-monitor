generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Contact {
  changedTime                      DateTime?
  contactId                        Int            @default(autoincrement()) @id
  createdTime                      DateTime       @default(now())
  creatorUserId                    Int
  email                            String?
  firstName                        String
  lastName                         String?
  phone                            Int?
  creator                          User           @relation("Contact_creatorUserIdToUser", fields: [creatorUserId], references: [userId])
  heartBeats                       HeartBeat[]
  notifications                    Notification[]
  user                             User?          @relation("ContactToUser_contactId")
  webProperties                    WebProperty[]

  @@index([creatorUserId], name: "creatorUserId")
}

model Event {
  eventId          Int            @default(autoincrement()) @id
  eventReferenceId Int
  monitorTypeId    Int
  monitorType      MonitorType    @relation(fields: [monitorTypeId], references: [monitorTypeId])
  notifications    Notification[]

  @@index([monitorTypeId], name: "monitorTypeId")
}

model HeartBeat {
  contactIdToNotify Int
  frequency         Int              @default(0)
  heartBeatId       Int              @default(autoincrement()) @id
  monitorId         Int
  notifyMethodId    Int
  contact           Contact          @relation(fields: [contactIdToNotify], references: [contactId])
  monitor           Monitor          @relation(fields: [monitorId], references: [monitorId])
  notifyMethod      NotifyMethod     @relation(fields: [notifyMethodId], references: [notifyMethodId])
  heartBeatEvents   HeartBeatEvent[]

  @@index([contactIdToNotify], name: "contactIdToNotify")
  @@index([monitorId], name: "monitorId")
  @@index([notifyMethodId], name: "notifyMethodId")
}

model HeartBeatEvent {
  heartBeatEventId Int       @default(autoincrement()) @id
  heartBeatId      Int
  httpResponseCode Int?
  requestTime      DateTime  @default(now())
  heartBeat        HeartBeat @relation(fields: [heartBeatId], references: [heartBeatId])

  @@index([heartBeatId], name: "heartBeatId")
}

model Monitor {
  monitorId          Int         @default(autoincrement()) @id
  monitorReferenceId Int
  monitorTypeId      Int
  webPropertyId      Int
  monitorType        MonitorType @relation(fields: [monitorTypeId], references: [monitorTypeId])
  webProperty        WebProperty @relation(fields: [webPropertyId], references: [webPropertyId])
  heartBeats         HeartBeat[] // Is this needed?

  @@index([monitorTypeId], name: "monitorTypeId")
  @@index([webPropertyId], name: "webPropertyId")
}

model MonitorType {
  monitorTypeId Int       @id
  type          String
  events        Event[]
  monitors      Monitor[]
}

model Notification {
  contactId      Int
  eventId        Int
  notificationId Int          @default(autoincrement()) @id
  notifyMethodId Int
  readTime       DateTime?
  sentTime       DateTime     @default(now())
  contact        Contact      @relation(fields: [contactId], references: [contactId])
  event          Event        @relation(fields: [eventId], references: [eventId])
  notifyMethod   NotifyMethod @relation(fields: [notifyMethodId], references: [notifyMethodId])

  @@index([contactId], name: "contactId")
  @@index([eventId], name: "eventId")
  @@index([notifyMethodId], name: "notifyMethodId")
}

model NotifyMethod {
  method         String
  notifyMethodId Int            @id
  heartBeats     HeartBeat[]
  notifications  Notification[]
}

model User {
  contactId       Int       @unique
  createdTime     DateTime  @default(now())
  password        String?
  updatedTime     DateTime?
  userId          Int       @default(autoincrement()) @id
  username        String    @unique
  contact         Contact   @relation("ContactToUser_contactId", fields: [contactId], references: [contactId])
  createdContacts Contact[] @relation("Contact_creatorUserIdToUser")

  @@index([contactId], name: "contact_index")
}

model WebProperty {
  createdTime    DateTime  @default(now())
  homeUrl        String
  ownerContactId Int
  updatedTime    DateTime?
  webPropertyId  Int       @default(autoincrement()) @id
  ownerContact   Contact   @relation(fields: [ownerContactId], references: [contactId])
  monitors       Monitor[]

  @@index([ownerContactId], name: "ownerContactId")
}